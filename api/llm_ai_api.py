from google import genai
from google.genai.types import GenerateContentConfig
from google.genai.errors import ServerError
import json
import os
import logging
from google.genai.types import Part
import httpx
from config import LLM_MODEL_NAME

LLM_API_KEY = os.getenv('LLM_API_KEY')
if not LLM_API_KEY:
    logging.error("LLM_API_KEY environment variable is not set. Please set it in .env file.")
    exit(1)

client = genai.Client(api_key=LLM_API_KEY)


def get_keywords(text):
    logging.info(f'Getting keywords for products of listing')
    response_schema = {
        'type': 'ARRAY',
        'items': {
            'type': 'OBJECT',
            'properties': {
                'id': {'type': 'INTEGER'},
                'keywords': {'type': 'STRING'}
            },
            'required': ['id', 'keywords']
        }
    }

    try:
        res = client.models.generate_content(
            model = "gemini-2.0-flash-exp",
            contents = text,
            config = GenerateContentConfig(
                system_instruction = """
Eres un modelo encargado de devolver keywords para localizar productos por wallapop. Tu tarea es devolver solo los nombres que correspondan a productos f√≠sicos que sean espec√≠ficos y f√°ciles de localizar. Para ello, sigue estas reglas:

1. **Filtra servicios**:
- Si el nombre describe un servicio, actividad o experiencia en lugar de un objeto f√≠sico (por ejemplo: "reparaci√≥n de bicicletas", "clases de golf", "impresi√≥n de fotos"), desc√°rtalo.

2. **Rechaza nombres ambiguos o gen√©ricos**:
- Si el nombre contiene t√©rminos como "juego", "maderas", "putter", "cuadro", "obra", "retrato", "original", o cualquier otra palabra que indique poca especificidad, desc√°rtalo.

3. **Valida la especificidad**:
- Prefiere nombres que incluyan t√©rminos t√©cnicos, descripciones claras o marcas/modelos espec√≠ficos.
- Si el nombre tiene menos de 3 palabras y no incluye t√©rminos √∫nicos, rech√°zalo.
- Elimina adjetivos como NUEVO.

4. **Prioriza nombres con marcas o modelos**:
- Si el nombre contiene una marca conocida (e.g., SRAM, M-Wave) o una referencia a un modelo o caracter√≠stica espec√≠fica (e.g., X1 1400, GX DUB), consid√©ralo v√°lido.

5. **Eval√∫a seg√∫n la longitud y detalle**:
- Los nombres deben tener suficiente informaci√≥n para identificar el producto de manera precisa.
- Rechaza nombres demasiado cortos o gen√©ricos, incluso si son correctos gramaticalmente.

6. **Ejemplos**:
- Rechaza:
    - Servicios: "reparaci√≥n de bicicletas", "clases de golf", "impresi√≥n de fotos".
    - Gen√©ricos: "juego de hierros golf", "maderas golf", "putter golf", "cuadro retrato", "obra original".
- Acepta:
    - Productos espec√≠ficos: "pedales transl√∫cidos M-Wave", "pu√±os abrazaderas tornillo M-Wave", "bielas SRAM X1 1400", "bielas SRAM GX DUB".

Tu salida debe ser una lista con los nombres filtrados que cumplan las reglas anteriores. Los servicios y productos ambiguos deben ser eliminados.""",
                response_mime_type = 'application/json',
                response_schema = response_schema,
                temperature=0.5
            )    
        )
        res_json = json.loads(res.text)
        return res_json
    except ServerError as e:
        logging.error(f'Server error while retrieving keywords to LLM: {e}')
        return None
    
def filter_product_from_list(product_name: str, product_list: list):
    logging.info(f'Filtering products with name: "{product_name}"')
    response_schema = {
        'type': 'ARRAY',
        'items': {
            'type': 'OBJECT',
            'properties': {
                'reason': {'type': 'STRING'},
                'included': {'type': 'BOOLEAN'},
                'id': {'type': 'INTEGER'}
            },
            'required': ['id', 'reason', 'included']
        }
    }

    try:
        num_i = 0
        product_list_text = f'El nombre del producto a filtrar es {product_name}\nListado:'
        for x in product_list:
            product_list_text += f"\nID:{num_i} {x['title']} {x['price']}‚Ç¨ Descripci√≥n\n{x['description']}\n"
            num_i += 1
        res = client.models.generate_content(
            model = "gemini-2.0-flash-exp",
            contents = '\n'.join(product_list_text),
            config = GenerateContentConfig(
                system_instruction = """
Eres un modelo encargado de filtrar y clasificar un listado de productos para identificar √∫nicamente aquellos que coincidan con un producto principal especificado. Debes proporcionar explicaciones claras sobre por qu√© un producto es relevante o ha sido excluido.

### Instrucciones:
1. **Entrada**:
   - Recibir√°s el nombre del producto principal (por ejemplo, "Xiaomi REDMI NOTE 13 5G") y su descripci√≥n.
   - Recibir√°s un listado de productos en el siguiente formato:  
     `ID:0 Producto Nombre Precio Descripci√≥n`.

2. **Proceso de Filtrado**:
   - **Incluye**: Productos cuyo nombre corresponda claramente al modelo principal especificado, aunque contengan ligeras variaciones en el formato (e.g., capitalizaci√≥n, descripciones adicionales como "Smartphone").
   - **Excluye**: Productos relacionados (fundas, protectores, accesorios, versiones no coincidentes con el modelo especificado, etc.).
   - Si el producto parece ambiguo (e.g., puede ser tanto un accesorio como el producto principal), desc√°rtalo.

3. **Criterios de Decisi√≥n**:
   - Palabras clave como "funda", "protector", "pack", "silicona", "antigolpes", "c√°mara", etc., indican un accesorio y deben ser excluidas.
   - Mant√©n todos los productos principales que sean duplicados en el listado.
   - Debes tener muy en cuenta la descripci√≥n de los productos ya que aunque con el t√≠tulo parezca otro producto, debes considerar la descripci√≥n para entender si se trata del mismo producto que el principal.

4. **Salida**:
   - Devuelve un listado de los IDs de los productos relevantes.
   - Para cada decisi√≥n, explica por qu√© el producto fue incluido o excluido.

5. **Ejemplo**:
   #### Entrada:
   Producto principal: "Xiaomi REDMI NOTE 13 5G"  
   Listado:
   El nombre del producto a filtrar es Xiaomi REDMI NOTE 13 5G
   Listado:
   ID:0 Xiaomi redmi note 13/5g 115.0‚Ç¨
   ID:1 XIAOMI REDMI NOTE 13 PRO 5G 330.0‚Ç¨
   ID:2 Redmi note 13 5G Xiaomi  155.0‚Ç¨
   ID:3 Smartphone Xiaomi Redmi Note 13 5g 8/256 SIN USO 239.9‚Ç¨
   ID:6 üì±Xiaomi Redmi Note 13 Pro 5g. Precintadoüì± 210.0‚Ç¨
   ID:7 Xiaomi Redmi Note 13 Pro 5G 180.0‚Ç¨
   ID:16 XIAOMI REDMI NOTE 13 5G 256GB NEGRO PRECINTADO 159.95‚Ç¨
   ID:17 Funda Xiaomi Redmi Note 13 5G Chopper 1.0‚Ç¨
   ID:19 PROTECTOR CRISTAL CAMARA XIAOMI REDMI NOTE 13 5G 4.0‚Ç¨

   #### Salida:
     ID:1 -> Excluido porque incluye "PRO", que no es parte del modelo principal.
     ID:6 -> Excluido porque incluye "Pro", que no es parte del modelo principal.
     ID:7 -> Excluido porque incluye "Pro", que no es parte del modelo principal.
     ID:17 -> Excluido porque es un accesorio (funda).
     ID:19 -> Excluido porque es un accesorio (protector cristal c√°mara).
""",
                response_mime_type = 'application/json',
                response_schema = response_schema,
                temperature=0.5
            )    
        )
        res_json = json.loads(res.text)
        return res_json
    except ServerError as e:
        logging.error(f'Server error while retrieving keywords to LLM: {e}')
        return None

def get_product_confidence(product: dict, images: list):
    logging.info(f'Getting product confidence of {product["title"]}')
    response_schema_product_confidence = {
        'type': 'OBJECT',
        'properties': {
            'confidence': {'type': 'INTEGER'},
            'reason': {'type': 'STRING'}
        },
        'required': ['confidence', 'reason']
    }

    try:
        res = client.models.generate_content(
            model = LLM_MODEL_NAME,
            contents = [
                Part.from_text(f'{product["title"]} {product["price"]}‚Ç¨ Descripci√≥n:\n{product["description"]}')
            ] + [Part.from_bytes(img.read(), img.headers['content-type']) for img in images],
            config = GenerateContentConfig(
                system_instruction = """
Eres un modelo encargado de evaluar productos y devolver dos cosas en espa√±ol:
1. Una explicaci√≥n detallada de c√≥mo llegaste a esa conclusi√≥n.
2. Un porcentaje que represente qu√© tan buena idea es comprar el producto.

### Instrucciones:
1. **Valora el producto seg√∫n su descripci√≥n**:
   - Da mucha importancia a la claridad, precisi√≥n y detalle de la descripci√≥n.
   - Una descripci√≥n completa, con informaci√≥n sobre caracter√≠sticas, estado, y uso previsto, aumenta la puntuaci√≥n.
   - Si la descripci√≥n es vaga o carece de detalles clave, reduce la puntuaci√≥n.
   - Si ves defectos en las im√°genes (pantalla rota, fallos...), reduce la puntuaci√≥n.

2. **Eval√∫a el estado del producto**:
   - Si el estado del producto es "nuevo", esto deber√≠a incrementar el porcentaje.
   - Si el estado es "usado" o tiene defectos, considera esto como un factor negativo, pero contrasta con la calidad de la descripci√≥n y el precio.

3. **Salida esperada**:
   - Proporciona una explicaci√≥n detallada que justifique la puntuaci√≥n basada en los puntos anteriores.
   - Devuelve el porcentaje como un n√∫mero entre 0 y 100, redondeado al entero m√°s cercano.

### Ejemplos:
#### Entrada:
Descripci√≥n: "Bicicleta de monta√±a usada, pero en buen estado. Marca: Trek, modelo Marlin 6, a√±o 2020. Revisada recientemente."
Estado: "Usado"

#### Salida esperada:
Confianza: 85%
Explicaci√≥n: "El producto tiene una descripci√≥n clara y detallada que incluye la marca, modelo, y el estado. Aunque es usado, se menciona que ha sido revisado, lo que aumenta la confiabilidad."

#### Entrada:
Descripci√≥n: "Zapatos deportivos, como nuevos, talla 42."
Estado: "Usado"

#### Salida esperada:
Confianza: 60%
Explicaci√≥n: "La descripci√≥n es algo vaga, ya que no menciona la marca ni otros detalles t√©cnicos del producto. Aunque el estado 'como nuevos' es positivo, la falta de detalles espec√≠ficos reduce la confianza en el producto."
""",
                response_mime_type = 'application/json',
                response_schema = response_schema_product_confidence,
                temperature=0.5
            )    
        )
        res_json = json.loads(res.text)
        return res_json
    except ServerError as e:
        logging.error(f'LLM error while getting product confidence in LLM {e}')
    except httpx.NetworkError as e:
        logging.error(f'Network error while getting product confidence in LLM {e}')
    except httpx.HTTPStatusError as e:
        logging.error(f'HTTP error while getting product confidence in LLM {e}')
